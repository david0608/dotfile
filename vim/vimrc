set nocompatible

call plug#begin()
Plug 'overcache/NeoSolarized'
Plug 'vim-python/python-syntax'
Plug 'yuezk/vim-js'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'neoclide/jsonc.vim'
Plug 'Yggdroot/indentLine'
Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdtree'
Plug 'Valloric/YouCompleteMe'
Plug 'vim-scripts/SyntaxAttr.vim'
call plug#end()

set path+=**
set wildmenu
set backup
set undofile
set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//
set backspace=indent,eol,start
set mouse=a
set hlsearch
set laststatus=2
set statusline+=%F
set showcmd
set t_Co=256
let mapleader = "-"

" Set color scheme
syntax enable
set background=dark
colorscheme NeoSolarized

hi DiffAdd	ctermbg=23 ctermfg=10 cterm=bold
hi DiffChange	ctermbg=52
hi DiffDelete	ctermbg=52 ctermfg=88
hi DiffText	ctermbg=23 ctermfg=14 cterm=bold

" Enable python syntax highlight.
let g:python_highlight_all=1

" Setup auto complete.
let g:ycm_autoclose_preview_window_after_completion=1

" Setup NERDTree shortcuts.
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

nnoremap ss :split<return><c-w>w
nnoremap sv :vsplit<return><c-w>w

nnoremap <space> <c-w>w
nnoremap sh <c-w>h
nnoremap s<left> <c-w>h
nnoremap sj <c-w>j
nnoremap s<down> <c-w>j
nnoremap sk <c-w>k
nnoremap s<up> <c-w>k
nnoremap sl <c-w>l
nnoremap s<right> <c-w>l

nnoremap t<return> :tabedit<return>
nnoremap <s-tab> :tabprev<return>
nnoremap <tab> :tabnext<return>

func CommentInNormal()
	if exists("b:comment_leader")
		exec "s/^/" .b:comment_leader ."/"
		noh
	else
		echom "b:comment_leader not declared."
	endif
endfunc

func UnCommentInNormal()
	if exists("b:comment_leader")
		exec "s/^" .b:comment_leader ."//"
		noh
	else
		echom "b:comment_leader not declared."
	endif
endfunc

func CommentInVisual()
	if exists("b:comment_leader")
		exec "'<,'>s/^/" .b:comment_leader ."/"
		noh
	else
		echom "b:comment_leader not declared."
	endif
endfunc

func UnCommentInVisual()
	if exists("b:comment_leader")
		exec "'<,'>s/^" .b:comment_leader ."//"
		noh
	else
		echom "b:comment_leader not declared."
	endif
endfunc

nnoremap <silent> <leader>c :<c-u>call CommentInNormal()<CR>
nnoremap <silent> <leader>uc :<c-u>call UnCommentInNormal()<CR>
vnoremap <silent> <leader>c :<c-u>call CommentInVisual()<CR>
vnoremap <silent> <leader>uc :<c-u>call UnCommentInVisual()<CR>

func SetupJavascript()
	setlocal expandtab smarttab shiftwidth=4 tabstop=4
	let b:comment_leader="\\/\\/ "
endfunc
autocmd BufNewFile,BufRead *.js,*.ts,*.jsx,*.tsx call SetupJavascript()

func SetupCCpp()
	setlocal expandtab smarttab shiftwidth=4 tabstop=4
endfunc
autocmd BufNewFile,BufRead *.c,*.cpp,*.h,*.hpp call SetupCCpp()

func SetupJson()
	setlocal filetype=jsonc
	setlocal expandtab smarttab shiftwidth=4 tabstop=4
endfunc
autocmd BufNewFile,BufRead *.json call SetupJson()

autocmd FileType python call SetupPython()
func SetupPython()
	let b:comment_leader="# "
endfunc

func SetupVimrc()
	let b:comment_leader="\" "
endfunc
autocmd BufNewFile,BufRead vimrc call SetupVimrc()

nnoremap <f2> :call SyntaxAttr()<cr>
